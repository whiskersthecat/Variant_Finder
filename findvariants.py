import sys
import os

if(len(sys.argv) < 2):
    print("Usage: Python3 findvariants.py sam_file.SAM variants_file.tsv")
    print(" sam_file: reads aligned to one region")
    print(" variants_file: SNP table of region generated by CLC genomics\n")
    exit()
    
sam_file = open(sys.argv[1],'r')
variants_file = open(sys.argv[2],'r')
group_name = sys.argv[2].split('/')[-1].split('.')[0]

print("[Find Variants] Group Name:", group_name)

# TEST:
# python3 findvariants.py /share/rwmstore/Assemblies_RWM/Lettuce/Lsat_V14/Reads_Ribo_NOR_CLC_Variants/Group0.HiFi_Segments.SAM /share/rwmstore/Assemblies_RWM/Lettuce/Lsat_V14/Reads_Ribo_NOR_CLC_Variants/Group0.Variants.SNV.tab

read_names = ["Pos","Var","~","Reference","Alternate","Frequency","Other_Count"]
variants = {}         # dictionaries indexed by SNP position
alternate_count = {}
other_count = {}

## 1. Read in variants file
print("[Find Variants] Reading in SNPs")
for line in variants_file.readlines():
    line = line.split()
    SNP_location = int(line[0])
    variants[SNP_location] = line[:5]
    alternate_count[SNP_location] = 0
    other_count[SNP_location] = 0


keys = sorted(list(variants.keys()))
print("[INFO]", len(keys), "total SNP locations")

## 2. Analyze reads in SAM file
print("[Find Variants] Parsing SAM CIGAR tokens for each read")

nreads = 0
reference_len = 0
for line in sam_file.readlines():

    line = line.split()
    if(line[0][0] == '@'): # skip header fields:
        continue

    name = line[0]
    cigar = line[5]
    seq = line[9]
    pos = int(line[3]) - 1

    # Generate the ALIGNED SEQUENCE
    align_seq = ""
    for i in range(0, int(pos)):   # if the alignment does not begin at position 0, buffer with N tokens:
        align_seq += "N"
    cur_num = ""
    pos = 0
    
    for token in cigar:
        if token.isnumeric():
            cur_num += token
            continue
        num = int(cur_num)
        new_pos = pos
        if token == "M" or token == "=" or token == "X":
            new_pos = pos + num
            align_seq += seq[pos:new_pos]
        elif token == "I":
            new_pos = pos + num
        elif token == "D":
            for i in range(0, num):
                align_seq += "-"
        elif token == "S":
            new_pos = pos + num
        else:
            print("CIGAR PARSE ERROR:: UNKNOWN TOKEN:", token)
            exit()

        pos = new_pos
        cur_num = ""

    # QUALITY CHECK all reads should have the same align_seq length
    if(nreads == 0):
        reference_len = len(align_seq)
    if(len(align_seq) != reference_len):
        print("CRITICAL QUALITY CHECK ERROR:: aligned sequence not length of reference sequence")
        exit()

    read_names.append(name)
    
    for SNP_location in variants:
        variants[SNP_location].append(align_seq[SNP_location - 1])
        if align_seq[SNP_location - 1] == variants[SNP_location][4]:
            alternate_count[SNP_location] += 1
        elif align_seq[SNP_location - 1] != variants[SNP_location][3] and align_seq[SNP_location - 1] != "N":
            other_count[SNP_location] += 1
    
    nreads += 1

print("[INFO]", nreads, "total reads")

for SNP_location in sorted(list(variants.keys())):
    variants[SNP_location].insert(5, 100 * alternate_count[SNP_location] / nreads)
    variants[SNP_location].insert(6, other_count[SNP_location])

## 3. Generate large SNP table
print("[Find Variants] Generating Large SNP table")
largeOfile = open(group_name + ".AllVariants.SNV.tab", "w")
for token in read_names:
    largeOfile.write(token + "\t")
largeOfile.write("\n")

sortedSNPLocations =  sorted(list(variants.keys()))
for SNP_location in sortedSNPLocations:
    for token in variants[SNP_location]:
        largeOfile.write(str(token) + "\t")
    largeOfile.write("\n")

## 4. Generate individual read SNP table
print("[Find Variants] Generating Individual Read SNP tables")

individual_reads_dir = "./" + group_name + "_Individual_Reads"
if not os.path.exists(individual_reads_dir):
    os.mkdir(individual_reads_dir)

for i in range(7, len(read_names)):
    readname = read_names[i]
    ofile = open(individual_reads_dir + "/" + readname + "." + group_name + ".Variants.SNV.tab", 'w')
    for SNP_location in sortedSNPLocations:
        SNP = variants[SNP_location]
        for col in [0, 1, 2, 3, 4]:
            ofile.write(str(SNP[col]) + "\t")
        ofile.write(SNP[i] + '\n')
    ofile.close()
    
